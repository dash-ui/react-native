import type { Falsy, StyleArguments } from "@dash-ui/styles";
import * as React from "react";
import * as RN from "react-native";
import type { JsonValue } from "type-fest";
export declare function createStyles<V extends DashTokens = DashTokens, T extends DashThemes = DashThemes>(options?: CreateStylesOptions<V, T>): {
    readonly styles: (<N extends string>(styleMap: StyleMap<N, V>) => {
        (...args: StyleArguments<N>): StyleObject;
        styles: StyleMap<N, V>;
    }) & {
        readonly one: (literals: TemplateStringsArray | string | StyleObject | StyleCallback<V>, ...placeholders: string[]) => ((createStyle?: boolean | undefined) => {}) & {
            styles: StyleObject;
        };
        readonly cls: (literals: TemplateStringsArray | string | StyleObject | StyleCallback<V>, ...placeholders: string[]) => RN.ViewStyle | RN.ImageStyle;
        readonly lazy: <Value extends JsonValue>(lazyFn: (value: Value) => string | StyleCallback<V> | StyleObject) => (value?: Value | undefined) => {};
        readonly join: (...css: string[]) => RN.ViewStyle | RN.ImageStyle;
        readonly tokens: V;
        readonly themes: T | NonNullable<{ [Name in keyof T]: V; }>;
    };
    readonly styled: {
        <Props extends {
            style?: RN.StyleProp<StyleObject>;
        }>(Component: React.ComponentType<Props>, styles?: StyleValue<V> | undefined): React.ForwardRefExoticComponent<React.PropsWithoutRef<{ [K in keyof Props]: K extends "style" ? {
            style?: RN.StyleProp<StyleValue>;
        }[K] : Props[K]; }> & React.RefAttributes<unknown>>;
        ActivityIndicator: React.ForwardRefExoticComponent<{
            animating?: boolean | undefined;
            color?: RN.ColorValue | undefined;
            hidesWhenStopped?: boolean | undefined;
            size?: number | "small" | "large" | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        DrawerLayoutAndroid: React.ForwardRefExoticComponent<{
            drawerBackgroundColor?: RN.ColorValue | undefined;
            drawerLockMode?: "unlocked" | "locked-closed" | "locked-open" | undefined;
            drawerPosition?: "left" | "right" | undefined;
            drawerWidth?: number | undefined;
            keyboardDismissMode?: "none" | "on-drag" | undefined;
            onDrawerClose?: (() => void) | undefined;
            onDrawerOpen?: (() => void) | undefined;
            onDrawerSlide?: ((event: RN.DrawerSlideEvent) => void) | undefined;
            onDrawerStateChanged?: ((event: "Idle" | "Dragging" | "Settling") => void) | undefined;
            renderNavigationView: () => JSX.Element;
            statusBarBackgroundColor?: RN.ColorValue | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        FlatList: React.ForwardRefExoticComponent<{
            ItemSeparatorComponent?: React.ComponentType<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            ListFooterComponentStyle?: RN.StyleProp<RN.ViewStyle>;
            ListHeaderComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            ListHeaderComponentStyle?: RN.StyleProp<RN.ViewStyle>;
            columnWrapperStyle?: RN.StyleProp<RN.ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
            data: readonly unknown[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: unknown[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: unknown, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: RN.ViewToken[];
                changed: RN.ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            renderItem: RN.ListRenderItem<unknown> | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => unknown) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: RN.ScrollViewProps) => React.ReactElement<RN.ScrollViewProps, string | React.JSXElementConstructor<any>>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: RN.ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentType<any> | undefined;
            contentContainerStyle?: RN.StyleProp<RN.ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            refreshControl?: React.ReactElement<RN.RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            StickyHeaderComponent?: React.ComponentType<any> | undefined;
            hitSlop?: RN.Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: RN.Insets | undefined;
            contentOffset?: RN.PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: RN.Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "end" | "start" | "center" | undefined;
            onScrollToTop?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: RN.ColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "always" | "never" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        Image: React.ForwardRefExoticComponent<{
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onError?: ((error: RN.NativeSyntheticEvent<RN.ImageErrorEventData>) => void) | undefined;
            onLoad?: ((event: RN.NativeSyntheticEvent<RN.ImageLoadEventData>) => void) | undefined;
            onLoadEnd?: (() => void) | undefined;
            onLoadStart?: (() => void) | undefined;
            progressiveRenderingEnabled?: boolean | undefined;
            borderRadius?: number | undefined;
            borderTopLeftRadius?: number | undefined;
            borderTopRightRadius?: number | undefined;
            borderBottomLeftRadius?: number | undefined;
            borderBottomRightRadius?: number | undefined;
            resizeMode?: RN.ImageResizeMode | undefined;
            resizeMethod?: "auto" | "resize" | "scale" | undefined;
            source: RN.ImageSourcePropType;
            loadingIndicatorSource?: RN.ImageURISource | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            defaultSource?: number | RN.ImageURISource | undefined;
            blurRadius?: number | undefined;
            capInsets?: RN.Insets | undefined;
            onProgress?: ((event: RN.NativeSyntheticEvent<RN.ImageProgressEventDataIOS>) => void) | undefined;
            onPartialLoad?: (() => void) | undefined;
            fadeDuration?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        ImageBackground: React.ForwardRefExoticComponent<{
            imageStyle?: RN.StyleProp<RN.ImageStyle>;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            imageRef?: ((image: RN.Image) => void) | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onError?: ((error: RN.NativeSyntheticEvent<RN.ImageErrorEventData>) => void) | undefined;
            onLoad?: ((event: RN.NativeSyntheticEvent<RN.ImageLoadEventData>) => void) | undefined;
            onLoadEnd?: (() => void) | undefined;
            onLoadStart?: (() => void) | undefined;
            progressiveRenderingEnabled?: boolean | undefined;
            borderRadius?: number | undefined;
            borderTopLeftRadius?: number | undefined;
            borderTopRightRadius?: number | undefined;
            borderBottomLeftRadius?: number | undefined;
            borderBottomRightRadius?: number | undefined;
            resizeMode?: RN.ImageResizeMode | undefined;
            resizeMethod?: "auto" | "resize" | "scale" | undefined;
            source: RN.ImageSourcePropType;
            loadingIndicatorSource?: RN.ImageURISource | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            defaultSource?: number | RN.ImageURISource | undefined;
            blurRadius?: number | undefined;
            capInsets?: RN.Insets | undefined;
            onProgress?: ((event: RN.NativeSyntheticEvent<RN.ImageProgressEventDataIOS>) => void) | undefined;
            onPartialLoad?: (() => void) | undefined;
            fadeDuration?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        KeyboardAvoidingView: React.ForwardRefExoticComponent<{
            behavior?: "height" | "padding" | "position" | undefined;
            contentContainerStyle?: RN.StyleProp<RN.ViewStyle>;
            keyboardVerticalOffset?: number | undefined;
            enabled?: boolean | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        Modal: React.ForwardRefExoticComponent<{
            animated?: boolean | undefined;
            animationType?: "none" | "slide" | "fade" | undefined;
            transparent?: boolean | undefined;
            visible?: boolean | undefined;
            onRequestClose?: (() => void) | undefined;
            onShow?: ((event: RN.NativeSyntheticEvent<any>) => void) | undefined;
            presentationStyle?: "fullScreen" | "pageSheet" | "formSheet" | "overFullScreen" | undefined;
            supportedOrientations?: ("portrait" | "portrait-upside-down" | "landscape" | "landscape-left" | "landscape-right")[] | undefined;
            onDismiss?: (() => void) | undefined;
            onOrientationChange?: ((event: RN.NativeSyntheticEvent<any>) => void) | undefined;
            hardwareAccelerated?: boolean | undefined;
            statusBarTranslucent?: boolean | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        NavigatorIOS: React.ForwardRefExoticComponent<{
            barTintColor?: RN.ColorValue | undefined;
            initialRoute: RN.Route;
            itemWrapperStyle?: RN.StyleProp<RN.ViewStyle>;
            interactivePopGestureEnabled?: boolean | undefined;
            navigationBarHidden?: boolean | undefined;
            shadowHidden?: boolean | undefined;
            tintColor?: RN.ColorValue | undefined;
            titleTextColor?: RN.ColorValue | undefined;
            translucent?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
        } & React.RefAttributes<unknown>>;
        RecyclerViewBackedScrollView: React.ForwardRefExoticComponent<{
            contentContainerStyle?: RN.StyleProp<RN.ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            horizontal?: boolean | null | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            removeClippedSubviews?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            refreshControl?: React.ReactElement<RN.RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            StickyHeaderComponent?: React.ComponentType<any> | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: RN.Insets | undefined;
            contentOffset?: RN.PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: RN.Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "end" | "start" | "center" | undefined;
            onScrollToTop?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: RN.ColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "always" | "never" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            persistentScrollbar?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        RefreshControl: React.ForwardRefExoticComponent<{
            onRefresh?: (() => void) | undefined;
            refreshing: boolean;
            tintColor?: RN.ColorValue | undefined;
            title?: string | undefined;
            titleColor?: RN.ColorValue | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            colors?: RN.ColorValue[] | undefined;
            enabled?: boolean | undefined;
            progressBackgroundColor?: RN.ColorValue | undefined;
            size?: number | undefined;
            progressViewOffset?: number | undefined;
        } & React.RefAttributes<unknown>>;
        SafeAreaView: React.ForwardRefExoticComponent<{
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        ScrollView: React.ForwardRefExoticComponent<{
            contentContainerStyle?: RN.StyleProp<RN.ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            horizontal?: boolean | null | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            removeClippedSubviews?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            refreshControl?: React.ReactElement<RN.RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            StickyHeaderComponent?: React.ComponentType<any> | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: RN.Insets | undefined;
            contentOffset?: RN.PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: RN.Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "end" | "start" | "center" | undefined;
            onScrollToTop?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: RN.ColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "always" | "never" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            persistentScrollbar?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        SectionList: React.ForwardRefExoticComponent<{
            ItemSeparatorComponent?: React.ComponentType<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            SectionSeparatorComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ComponentType<any> | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: RN.SectionBase<unknown, unknown>[] | null, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            initialNumToRender?: number | undefined;
            inverted?: boolean | null | undefined;
            keyExtractor?: ((item: unknown, index: number) => string) | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            refreshing?: boolean | null | undefined;
            renderItem?: RN.SectionListRenderItem<unknown, unknown> | undefined;
            renderSectionHeader?: ((info: {
                section: RN.SectionBase<unknown, unknown>;
            }) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null) | undefined;
            renderSectionFooter?: ((info: {
                section: RN.SectionBase<unknown, unknown>;
            }) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null) | undefined;
            sections: readonly RN.SectionBase<unknown, unknown>[];
            renderScrollComponent?: ((props: RN.ScrollViewProps) => React.ReactElement<RN.ScrollViewProps, string | React.JSXElementConstructor<any>>) | undefined;
            removeClippedSubviews?: boolean | undefined;
            stickySectionHeadersEnabled?: boolean | undefined;
            legacyImplementation?: boolean | undefined;
            data?: any;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => unknown) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            horizontal?: boolean | null | undefined;
            initialScrollIndex?: number | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: RN.ViewToken[];
                changed: RN.ViewToken[];
            }) => void) | null | undefined;
            progressViewOffset?: number | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfig?: RN.ViewabilityConfig | undefined;
            viewabilityConfigCallbackPairs?: RN.ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentType<any> | undefined;
            contentContainerStyle?: RN.StyleProp<RN.ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            refreshControl?: React.ReactElement<RN.RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            StickyHeaderComponent?: React.ComponentType<any> | undefined;
            hitSlop?: RN.Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: RN.Insets | undefined;
            contentOffset?: RN.PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: RN.Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "end" | "start" | "center" | undefined;
            onScrollToTop?: ((event: RN.NativeSyntheticEvent<RN.NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: RN.ColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "always" | "never" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            persistentScrollbar?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        SnapshotViewIOS: React.ForwardRefExoticComponent<{
            onSnapshotReady: () => any;
            testIdentifier: string;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        Switch: React.ForwardRefExoticComponent<{
            thumbColor?: RN.ColorValue | undefined;
            trackColor?: {
                false?: RN.ColorValue | null | undefined;
                true?: RN.ColorValue | null | undefined;
            } | undefined;
            disabled?: boolean | undefined;
            onChange?: ((event: RN.SwitchChangeEvent) => void | Promise<void>) | null | undefined;
            onValueChange?: ((value: boolean) => void | Promise<void>) | null | undefined;
            testID?: string | undefined;
            value?: boolean | undefined;
            ios_backgroundColor?: RN.ColorValue | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            onTintColor?: RN.ColorValue | undefined;
            thumbTintColor?: RN.ColorValue | undefined;
            tintColor?: RN.ColorValue | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        Text: React.ForwardRefExoticComponent<{
            allowFontScaling?: boolean | undefined;
            ellipsizeMode?: "head" | "middle" | "tail" | "clip" | undefined;
            lineBreakMode?: "head" | "middle" | "tail" | "clip" | undefined;
            numberOfLines?: number | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onTextLayout?: ((event: RN.NativeSyntheticEvent<RN.TextLayoutEventData>) => void) | undefined;
            onPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressIn?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressOut?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onLongPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            maxFontSizeMultiplier?: number | null | undefined;
            adjustsFontSizeToFit?: boolean | undefined;
            minimumFontScale?: number | undefined;
            suppressHighlighting?: boolean | undefined;
            selectable?: boolean | undefined;
            selectionColor?: RN.ColorValue | undefined;
            textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
            dataDetectorType?: "link" | "none" | "phoneNumber" | "email" | "all" | null | undefined;
            android_hyphenationFrequency?: "none" | "normal" | "balanced" | "full" | "high" | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        TextInput: React.ForwardRefExoticComponent<{
            allowFontScaling?: boolean | undefined;
            autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
            autoCorrect?: boolean | undefined;
            autoFocus?: boolean | undefined;
            blurOnSubmit?: boolean | undefined;
            caretHidden?: boolean | undefined;
            contextMenuHidden?: boolean | undefined;
            defaultValue?: string | undefined;
            editable?: boolean | undefined;
            keyboardType?: RN.KeyboardTypeOptions | undefined;
            maxLength?: number | undefined;
            multiline?: boolean | undefined;
            onBlur?: ((e: RN.NativeSyntheticEvent<RN.TextInputFocusEventData>) => void) | undefined;
            onChange?: ((e: RN.NativeSyntheticEvent<RN.TextInputChangeEventData>) => void) | undefined;
            onChangeText?: ((text: string) => void) | undefined;
            onContentSizeChange?: ((e: RN.NativeSyntheticEvent<RN.TextInputContentSizeChangeEventData>) => void) | undefined;
            onEndEditing?: ((e: RN.NativeSyntheticEvent<RN.TextInputEndEditingEventData>) => void) | undefined;
            onPressIn?: ((e: RN.NativeSyntheticEvent<RN.NativeTouchEvent>) => void) | undefined;
            onPressOut?: ((e: RN.NativeSyntheticEvent<RN.NativeTouchEvent>) => void) | undefined;
            onFocus?: ((e: RN.NativeSyntheticEvent<RN.TextInputFocusEventData>) => void) | undefined;
            onSelectionChange?: ((e: RN.NativeSyntheticEvent<RN.TextInputSelectionChangeEventData>) => void) | undefined;
            onSubmitEditing?: ((e: RN.NativeSyntheticEvent<RN.TextInputSubmitEditingEventData>) => void) | undefined;
            onTextInput?: ((e: RN.NativeSyntheticEvent<RN.TextInputTextInputEventData>) => void) | undefined;
            onScroll?: ((e: RN.NativeSyntheticEvent<RN.TextInputScrollEventData>) => void) | undefined;
            onKeyPress?: ((e: RN.NativeSyntheticEvent<RN.TextInputKeyPressEventData>) => void) | undefined;
            placeholder?: string | undefined;
            placeholderTextColor?: RN.ColorValue | undefined;
            returnKeyType?: RN.ReturnKeyTypeOptions | undefined;
            secureTextEntry?: boolean | undefined;
            selectTextOnFocus?: boolean | undefined;
            selection?: {
                start: number;
                end?: number | undefined;
            } | undefined;
            selectionColor?: RN.ColorValue | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            textAlign?: "left" | "right" | "center" | undefined;
            testID?: string | undefined;
            inputAccessoryViewID?: string | undefined;
            value?: string | undefined;
            maxFontSizeMultiplier?: number | null | undefined;
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
            clearTextOnFocus?: boolean | undefined;
            dataDetectorTypes?: RN.DataDetectorTypes | RN.DataDetectorTypes[] | undefined;
            enablesReturnKeyAutomatically?: boolean | undefined;
            keyboardAppearance?: "default" | "light" | "dark" | undefined;
            passwordRules?: string | null | undefined;
            rejectResponderTermination?: boolean | null | undefined;
            selectionState?: RN.DocumentSelectionState | undefined;
            spellCheck?: boolean | undefined;
            textContentType?: "name" | "none" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "nickname" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "username" | "password" | "newPassword" | "oneTimeCode" | undefined;
            scrollEnabled?: boolean | undefined;
            autoCompleteType?: "name" | "email" | "username" | "password" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "postal-code" | "street-address" | "tel" | "off" | undefined;
            importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
            disableFullscreenUI?: boolean | undefined;
            inlineImageLeft?: string | undefined;
            inlineImagePadding?: number | undefined;
            numberOfLines?: number | undefined;
            returnKeyLabel?: string | undefined;
            textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
            underlineColorAndroid?: RN.ColorValue | undefined;
            textAlignVertical?: "bottom" | "top" | "center" | "auto" | undefined;
            showSoftInputOnFocus?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        TouchableHighlight: React.ForwardRefExoticComponent<{
            activeOpacity?: number | undefined;
            onHideUnderlay?: (() => void) | undefined;
            onShowUnderlay?: (() => void) | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            underlayColor?: RN.ColorValue | undefined;
            delayLongPress?: number | undefined;
            delayPressIn?: number | undefined;
            delayPressOut?: number | undefined;
            disabled?: boolean | null | undefined;
            hitSlop?: RN.Insets | undefined;
            onBlur?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onFocus?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onLongPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressIn?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressOut?: ((event: RN.GestureResponderEvent) => void) | undefined;
            pressRetentionOffset?: RN.Insets | undefined;
            testID?: string | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            touchSoundDisabled?: boolean | null | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        TouchableNativeFeedback: React.ForwardRefExoticComponent<{
            background?: RN.BackgroundPropType | undefined;
            useForeground?: boolean | undefined;
            delayLongPress?: number | undefined;
            delayPressIn?: number | undefined;
            delayPressOut?: number | undefined;
            disabled?: boolean | null | undefined;
            hitSlop?: RN.Insets | undefined;
            onBlur?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onFocus?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onLongPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressIn?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressOut?: ((event: RN.GestureResponderEvent) => void) | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            pressRetentionOffset?: RN.Insets | undefined;
            testID?: string | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            touchSoundDisabled?: boolean | null | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        TouchableOpacity: React.ForwardRefExoticComponent<{
            activeOpacity?: number | undefined;
            delayLongPress?: number | undefined;
            delayPressIn?: number | undefined;
            delayPressOut?: number | undefined;
            disabled?: boolean | null | undefined;
            hitSlop?: RN.Insets | undefined;
            onBlur?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onFocus?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onLongPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressIn?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressOut?: ((event: RN.GestureResponderEvent) => void) | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            pressRetentionOffset?: RN.Insets | undefined;
            testID?: string | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            touchSoundDisabled?: boolean | null | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        TouchableWithoutFeedback: React.ForwardRefExoticComponent<{
            delayLongPress?: number | undefined;
            delayPressIn?: number | undefined;
            delayPressOut?: number | undefined;
            disabled?: boolean | null | undefined;
            hitSlop?: RN.Insets | undefined;
            onBlur?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onFocus?: ((e: RN.NativeSyntheticEvent<RN.TargetedEvent>) => void) | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            onLongPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPress?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressIn?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onPressOut?: ((event: RN.GestureResponderEvent) => void) | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            pressRetentionOffset?: RN.Insets | undefined;
            testID?: string | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            touchSoundDisabled?: boolean | null | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
        View: React.ForwardRefExoticComponent<{
            hitSlop?: RN.Insets | undefined;
            onLayout?: ((event: RN.LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: RN.StyleProp<StyleValue<DashTokens>>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: RN.TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: RN.GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: RN.GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: RN.GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: RN.AccessibilityRole | undefined;
            accessibilityState?: RN.AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: RN.AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: RN.AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
        } & React.RefAttributes<unknown>>;
    };
    readonly useDash: () => {
        styles: (<N extends string>(styleMap: StyleMap<N, V>) => {
            (...args: StyleArguments<N>): StyleObject;
            styles: StyleMap<N, V>;
        }) & {
            readonly one: (literals: TemplateStringsArray | string | StyleObject | StyleCallback<V>, ...placeholders: string[]) => ((createStyle?: boolean | undefined) => {}) & {
                styles: StyleObject;
            };
            readonly cls: (literals: TemplateStringsArray | string | StyleObject | StyleCallback<V>, ...placeholders: string[]) => RN.ViewStyle | RN.ImageStyle;
            readonly lazy: <Value extends JsonValue>(lazyFn: (value: Value) => string | StyleCallback<V> | StyleObject) => (value?: Value | undefined) => {};
            readonly join: (...css: string[]) => RN.ViewStyle | RN.ImageStyle;
            readonly tokens: V;
            readonly themes: T | NonNullable<{ [Name in keyof T]: V; }>;
        };
        setTheme(theme: keyof T): void;
    };
    readonly Provider: ({ defaultTheme, children, }: {
        defaultTheme?: keyof T | undefined;
        children?: React.ReactNode;
    }) => JSX.Element;
};
/**
 * A utility function that will compile style objects and callbacks into CSS strings.
 *
 * @param styles - A style callback, object, or string
 * @param tokens - A map of CSS tokens for style callbacks
 */
export declare function compileStyles<V extends DashTokens = DashTokens>(styles: StyleValue<V> | Falsy, tokens: V): StyleObject;
export declare type Styles = ReturnType<typeof createStyles>;
export interface CreateStylesOptions<V extends DashTokens = DashTokens, T extends DashThemes = DashThemes> {
    readonly tokens?: V;
    readonly themes?: {
        [Name in keyof T]: V;
    };
}
export declare type StyleMap<N extends string, V extends DashTokens = DashTokens> = {
    [Name in N | "default"]?: string | StyleCallback<V> | StyleObject;
};
export declare type StyleValue<V extends DashTokens = DashTokens> = string | StyleCallback<V> | StyleObject;
export declare type StyleObject = RN.ViewStyle | RN.TextStyle | RN.ImageStyle;
export declare type StyleCallback<V extends DashTokens = DashTokens> = (tokens: V) => StyleObject | string;
export interface DashTokens {
}
export interface DashThemes {
}
/**
 * The names of the themes defined in the `DashThemes` type
 */
export declare type DashThemeNames = Extract<keyof DashThemes, string>;
